[
  {
    "testTitle": "With basic authentication",
    "config": {
      "apiUrl": "http://sample.com/api/hooks/url",
      "auth": "basicAuth",
      "username": "test-user",
      "password": "",
      "method": "POST",
      "format": "JSON",
      "oneTrustCookieCategories": [
        {
          "oneTrustCookieCategory": ""
        }
      ],
      "http-connectionMode": "cloud",
      "connectionMode": {
        "cloud": "cloud"
      },
      "consentManagement": {},
      "isBatchingEnabled": true,
      "maxBatchSize": "10",
      "headers": [
        {
          "to": "$.h1",
          "from": "'val1'"
        },
        {
          "to": "$.h2",
          "from": "2"
        },
        {
          "to": "$.h3",
          "from": "$.properties.testProp"
        }
      ],
      "queryParams": [
        {
          "to": "$.q1",
          "from": "'val1'"
        }
      ],
      "propertiesMapping": [
        {
          "from": "$.properties.key1",
          "to": "$.events.key2"
        }
      ]
    },
    "result": true
  },
  {
    "testTitle": "With api key authentication",
    "config": {
      "apiUrl": "http://sample.com/api/hooks/url",
      "auth": "apiKeyAuth",
      "apiKeyName": "x-api-key",
      "apiKeyValue": "123",
      "method": "POST",
      "format": "JSON",
      "oneTrustCookieCategories": [
        {
          "oneTrustCookieCategory": ""
        }
      ],
      "http-connectionMode": "cloud",
      "connectionMode": {
        "cloud": "cloud"
      },
      "consentManagement": {},
      "isBatchingEnabled": false
    },
    "result": true
  },
  {
    "testTitle": "With invalid max batch size",
    "config": {
      "apiUrl": "http://sample.com/api/hooks/url",
      "auth": "noAuth",
      "method": "POST",
      "format": "JSON",
      "isBatchingEnabled": true,
      "maxBatchSize": "101"
    },
    "result": false,
    "err": [
      "maxBatchSize must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^([1-9][0-9]{0,1}|100)$\"",
      " must match \"then\" schema"
    ]
  },
  {
    "testTitle": "With invalid api url",
    "config": {
      "apiUrl": "http://23452345.ngrok.io/",
      "auth": "noAuth",
      "method": "POST",
      "format": "JSON"
    },
    "result": false,
    "err": [
      "apiUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|(?!.*\\.ngrok\\.io)^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$|^$\""
    ]
  },
  {
    "testTitle": "With valid multiple consent management providers config",
    "config": {
      "apiUrl": "http://test.ec-example.example.com",
      "method": "POST",
      "format": "JSON",
      "consentManagement": {
        "web": [
          {
            "provider": "custom",
            "consents": [
              {
                "consent": "Marketing"
              }
            ],
            "resolutionStrategy": "or"
          },
          {
            "provider": "oneTrust",
            "consents": [
              {
                "consent": "Marketing"
              }
            ]
          },
          {
            "provider": "ketch",
            "consents": []
          }
        ]
      }
    },
    "result": true
  },
  {
    "testTitle": "With consent management custom provider config and invalid resolutionStrategy value",
    "config": {
      "apiUrl": "http://test.ec-example.example.com",
      "method": "POST",
      "format": "JSON",
      "headers": [
        {
          "from": "$.isSecure",
          "to": "101"
        }
      ],
      "consentManagement": {
        "android": [
          {
            "provider": "custom",
            "resolutionStrategy": "nor"
          }
        ]
      }
    },
    "result": false,
    "err": [
      "consentManagement.android.0.resolutionStrategy must be equal to one of the allowed values",
      "consentManagement.android.0 must match \"then\" schema"
    ]
  },
  {
    "testTitle": "With consent management custom provider config and no resolutionStrategy value",
    "config": {
      "apiUrl": "http://test.ec-example.example.com",
      "method": "POST",
      "format": "JSON",
      "headers": [
        {
          "from": "$.isSecure",
          "to": "101"
        }
      ],
      "consentManagement": {
        "android": [
          {
            "provider": "custom"
          }
        ]
      }
    },
    "result": false,
    "err": [
      "consentManagement.android.0 must have required property 'resolutionStrategy'",
      "consentManagement.android.0 must match \"then\" schema"
    ]
  },
  {
    "testTitle": "With consent management OneTrust provider config and no resolutionStrategy value",
    "config": {
      "apiUrl": "http://test.ec-example.example.com",
      "method": "POST",
      "format": "JSON",
      "headers": [
        {
          "from": "$.isSecure",
          "to": "101"
        }
      ],
      "consentManagement": {
        "android": [
          {
            "provider": "oneTrust"
          }
        ]
      }
    },
    "result": true
  },
  {
    "testTitle": "With consent management custom provider config invalid provider value",
    "config": {
      "apiUrl": "http://test.ec-example.example.com",
      "method": "POST",
      "format": "JSON",
      "headers": [
        {
          "from": "$.isSecure",
          "to": "101"
        }
      ],
      "consentManagement": {
        "android": [
          {
            "provider": "dummyProvider"
          }
        ]
      }
    },
    "result": false,
    "err": ["consentManagement.android.0.provider must be equal to one of the allowed values"]
  }
]
