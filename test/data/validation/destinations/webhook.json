[
  {
    "config": {
      "webhookUrl": "http://sample.com/url",
      "webhookMethod": "GET",
      "headers": [
        {
          "from": "a",
          "to": "a"
        },
        {
          "from": "b",
          "to": "b"
        },
        {
          "from": "c",
          "to": "c"
        }
      ]
    },
    "result": true
  },
  {
    "config": {
      "webhookUrl": "http://[2001:4860:4860::8888]",
      "webhookMethod": "GET",
      "headers": [
        {
          "from": "a",
          "to": "a"
        },
        {
          "from": "b",
          "to": "b"
        },
        {
          "from": "c",
          "to": "c"
        }
      ]
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "config": {
      "webhookUrl": "http://23452345.ngrok.io/",
      "webhookMethod": "GET",
      "headers": [
        {
          "from": "a",
          "to": "a"
        },
        {
          "from": "b",
          "to": "b"
        },
        {
          "from": "c",
          "to": "c"
        }
      ]
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "config": {
      "webhookUrl": "http://localhost:3001",
      "webhookMethod": "GET",
      "headers": [
        {
          "from": "a",
          "to": "a"
        },
        {
          "from": "b",
          "to": "b"
        },
        {
          "from": "c",
          "to": "c"
        }
      ]
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "config": {
      "webhookUrl": "https://192.168.1.100",
      "webhookMethod": "GET",
      "headers": [
        {
          "from": "a",
          "to": "a"
        },
        {
          "from": "b",
          "to": "b"
        },
        {
          "from": "c",
          "to": "c"
        }
      ]
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "config": {
      "webhookUrl": "https://0.0.0.0",
      "webhookMethod": "GET",
      "headers": [
        {
          "from": "a",
          "to": "a"
        },
        {
          "from": "b",
          "to": "b"
        },
        {
          "from": "c",
          "to": "c"
        }
      ]
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "config": {
      "webhookUrl": "https://[::1]",
      "webhookMethod": "GET",
      "headers": [
        {
          "from": "a",
          "to": "a"
        },
        {
          "from": "b",
          "to": "b"
        },
        {
          "from": "c",
          "to": "c"
        }
      ]
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "config": {
      "webhookUrl": "https://[::ffff:192.168.0.1]",
      "webhookMethod": "GET",
      "headers": [
        {
          "from": "a",
          "to": "a"
        },
        {
          "from": "b",
          "to": "b"
        },
        {
          "from": "c",
          "to": "c"
        }
      ]
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "config": {
      "webhookMethod": "POST",
      "headers": [
        {
          "from": "a",
          "to": "a"
        },
        {
          "from": "b",
          "to": "b"
        },
        {
          "from": "c",
          "to": "c"
        }
      ]
    },
    "result": false,
    "err": [" must have required property 'webhookUrl'"]
  },
  {
    "config": {
      "webhookUrl": "https://webhook.site/cd6e1235-142d-6355-155e-feee12cb3c49",
      "webhookMethod": "POST"
    },
    "result": true
  },
  {
    "config": {
      "webhookUrl": "http://sample.com/api/hooks/url",
      "webhookMethod": "POST",
      "headers": [
        {
          "from": "Authorization",
          "to": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCINiIsInR5cCI6IkpXVCkYTJkMDA4ZTcwMGNiIsInR5cCI6IkpXVCXIiOiI2MTE1NTJmYWYyNGE2ODAwMTJjYjhiNzQiLCJvcmciOiI2MGRjN2M2MWU5ZDliM2MzOTVjZWI5ZGIiLCJvcmdOYW1lIjoibmVpZ2hib3IiLCJ1c2VyVHlwZSI6Im1hY2hpbmUiLCJwb2QiOiJwcm9kMSIsInJvbGVzIjpbIm9yZy5hZG1pbiIsIm9yZy5ob29rcyIsIm9yZy5wZXJtaXNzaW9uIiwib3JnLnVzZXIiXSwiYXVkIjoidXJuOmNvbnN1bWVyIiwiaXNzIjoidXJuOmFwaSIsInN1YiI6IjYxMTU1MmZhZjI0YTY4MDAxMmNiOGI3NCJ9.CwzS9X8bQqC3lNt5WlxbHosJZ8sL-ogUTNh_ORBNIIw"
        }
      ]
    },
    "result": true
  },
  {
    "config": {
      "webhookUrl": "ftp://bridgettl.com/wbh",
      "webhookMethod": "GET",
      "headers": [
        {
          "from": "isSecure",
          "to": "secure010qpo12"
        }
      ]
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "config": {
      "webhookUrl": "http://test.ec-example.example.com",
      "webhookMethod": "POST",
      "headers": [
        {
          "from": "isSecure",
          "to": "101"
        }
      ]
    },
    "result": true
  },
  {
    "testTitle": "With valid multiple consent management providers config",
    "config": {
      "webhookUrl": "http://test.ec-example.example.com",
      "webhookMethod": "POST",
      "headers": [
        {
          "from": "isSecure",
          "to": "101"
        }
      ],
      "consentManagement": {
        "web": [
          {
            "provider": "custom",
            "consents": [
              {
                "consent": "Marketing"
              }
            ],
            "resolutionStrategy": "or"
          },
          {
            "provider": "oneTrust",
            "consents": [
              {
                "consent": "Marketing"
              }
            ]
          },
          {
            "provider": "ketch",
            "consents": []
          }
        ]
      }
    },
    "result": true
  },
  {
    "testTitle": "With consent management custom provider config and invalid resolutionStrategy value",
    "config": {
      "webhookUrl": "http://test.ec-example.example.com",
      "webhookMethod": "POST",
      "headers": [
        {
          "from": "isSecure",
          "to": "101"
        }
      ],
      "consentManagement": {
        "android": [
          {
            "provider": "custom",
            "resolutionStrategy": "nor"
          }
        ]
      }
    },
    "result": false,
    "err": [
      "consentManagement.android.0.resolutionStrategy must be equal to one of the allowed values",
      "consentManagement.android.0 must match \"then\" schema"
    ]
  },
  {
    "testTitle": "With consent management custom provider config and no resolutionStrategy value",
    "config": {
      "webhookUrl": "http://test.ec-example.example.com",
      "webhookMethod": "POST",
      "headers": [
        {
          "from": "isSecure",
          "to": "101"
        }
      ],
      "consentManagement": {
        "android": [
          {
            "provider": "custom"
          }
        ]
      }
    },
    "result": false,
    "err": [
      "consentManagement.android.0 must have required property 'resolutionStrategy'",
      "consentManagement.android.0 must match \"then\" schema"
    ]
  },
  {
    "testTitle": "With consent management OneTrust provider config and no resolutionStrategy value",
    "config": {
      "webhookUrl": "http://test.ec-example.example.com",
      "webhookMethod": "POST",
      "headers": [
        {
          "from": "isSecure",
          "to": "101"
        }
      ],
      "consentManagement": {
        "android": [
          {
            "provider": "oneTrust"
          }
        ]
      }
    },
    "result": true
  },
  {
    "testTitle": "With consent management custom provider config invalid provider value",
    "config": {
      "webhookUrl": "http://test.ec-example.example.com",
      "webhookMethod": "POST",
      "headers": [
        {
          "from": "isSecure",
          "to": "101"
        }
      ],
      "consentManagement": {
        "android": [
          {
            "provider": "dummyProvider"
          }
        ]
      }
    },
    "result": false,
    "err": ["consentManagement.android.0.provider must be equal to one of the allowed values"]
  },
  {
    "config": {
      "webhookUrl": "http://sample.com/url",
      "webhookMethod": "GET",
      "headers": [
        {
          "from": "a",
          "to": "a"
        },
        {
          "from": "b",
          "to": "b"
        },
        {
          "from": "c",
          "to": "c"
        }
      ],
      "oneTrustCookieCategories": {
        "android": [
          {
            "oneTrustCookieCategory": "C0001"
          },
          {
            "oneTrustCookieCategory": "C0002"
          }
        ],
        "ios": [
          {
            "oneTrustCookieCategory": "C0003"
          },
          {
            "oneTrustCookieCategory": "C0004"
          }
        ],
        "web": [
          {
            "oneTrustCookieCategory": ""
          }
        ],
        "unity": [],
        "amp": [
          {
            "oneTrustCookieCategory": "env.ENVIRONMENT_VARIABLE"
          }
        ],
        "cloud": [
          {
            "oneTrustCookieCategory": "{{ event.properties.prop1 || 'val' }}"
          }
        ],
        "warehouse": [
          {
            "oneTrustCookieCategory": "C0001"
          },
          {
            "oneTrustCookieCategory": "C0002"
          }
        ],
        "reactnative": [
          {
            "oneTrustCookieCategory": "C0003"
          },
          {
            "oneTrustCookieCategory": "C0004"
          }
        ],
        "flutter": [
          {
            "oneTrustCookieCategory": ""
          }
        ],
        "cordova": [],
        "shopify": [
          {
            "oneTrustCookieCategory": "env.ENVIRONMENT_VARIABLE"
          }
        ]
      },
      "ketchConsentPurposes": {
        "android": [
          {
            "purpose": "P1"
          },
          {
            "purpose": "P2"
          }
        ],
        "ios": [
          {
            "purpose": "P3"
          },
          {
            "purpose": "P4"
          }
        ],
        "web": [
          {
            "purpose": ""
          }
        ],
        "unity": [],
        "amp": [
          {
            "purpose": "env.ENVIRONMENT_VARIABLE"
          }
        ],
        "cloud": [
          {
            "purpose": "{{ event.properties.prop1 || 'val' }}"
          }
        ],
        "warehouse": [
          {
            "purpose": "P1"
          },
          {
            "purpose": "P2"
          }
        ],
        "reactnative": [
          {
            "purpose": "P3"
          },
          {
            "purpose": "P4"
          }
        ],
        "flutter": [
          {
            "purpose": ""
          }
        ],
        "cordova": [],
        "shopify": [
          {
            "purpose": "env.ENVIRONMENT_VARIABLE"
          }
        ]
      }
    },
    "result": true
  },
  {
    "config": {
      "webhookUrl": "http://sample.com/url",
      "webhookMethod": "GET",
      "headers": [
        {
          "from": "a",
          "to": "a"
        },
        {
          "from": "b",
          "to": "b"
        },
        {
          "from": "c",
          "to": "c"
        }
      ],
      "oneTrustCookieCategories": [
        {
          "oneTrustCookieCategory": "C0001"
        },
        {
          "oneTrustCookieCategory": "C0002"
        }
      ],
      "ketchConsentPurposes": [
        {
          "purpose": "P1"
        },
        {
          "purpose": "P2"
        }
      ]
    },
    "result": false,
    "err": ["oneTrustCookieCategories must be object", "ketchConsentPurposes must be object"]
  },
  {
    "config": {
      "webhookUrl": "http://sample.com/url",
      "webhookMethod": "GET",
      "headers": [
        {
          "from": "a",
          "to": "a"
        },
        {
          "from": "b",
          "to": "b"
        },
        {
          "from": "c",
          "to": "c"
        }
      ],
      "oneTrustCookieCategories": {
        "android": [
          {
            "oneTrustCookieCategory": "more than 100 characters string - AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
          },
          {
            "oneTrustCookieCategory": "C0004"
          }
        ],
        "ios": [
          {
            "oneTrustCookieCategory": {
              "not": "a string"
            }
          },
          {
            "oneTrustCookieCategory": "C0004"
          }
        ],
        "web": {
          "not": "an array"
        },
        "unity": [
          "not an object",
          {
            "oneTrustCookieCategory": "C0004"
          }
        ]
      },
      "ketchConsentPurposes": {
        "android": [
          {
            "purpose": "more than 100 characters string - AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
          },
          {
            "purpose": "P4"
          }
        ],
        "ios": [
          {
            "purpose": {
              "not": "a string"
            }
          },
          {
            "purpose": "P4"
          }
        ],
        "web": {
          "not": "an array"
        },
        "unity": [
          "not an object",
          {
            "purpose": "P4"
          }
        ]
      }
    },
    "result": false,
    "err": [
      "oneTrustCookieCategories.android.0.oneTrustCookieCategory must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(.{0,100})$\"",
      "oneTrustCookieCategories.ios.0.oneTrustCookieCategory must be string",
      "oneTrustCookieCategories.web must be array",
      "oneTrustCookieCategories.unity.0 must be object",
      "ketchConsentPurposes.android.0.purpose must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(.{0,100})$\"",
      "ketchConsentPurposes.ios.0.purpose must be string",
      "ketchConsentPurposes.web must be array",
      "ketchConsentPurposes.unity.0 must be object"
    ]
  },
  {
    "testTitle": "localhost with port",
    "config": {
      "webhookUrl": "http://127.1.2.3:8080",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "testTitle": "ipv4 address with port",
    "config": {
      "webhookUrl": "http://192.168.1.100:8080",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "testTitle": "SSRF - Internal IP address",
    "config": {
      "webhookUrl": "http://0.0.0.0",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "testTitle": "SSRF - Private IP address",
    "config": {
      "webhookUrl": "http://192.168.0.1",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "testTitle": "SSRF - IPv6 loopback",
    "config": {
      "webhookUrl": "http://[::1]",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "testTitle": "SSRF - Domain with DNS rebinding",
    "config": {
      "webhookUrl": "http://spoofed.burpcollaborator.net",
      "webhookMethod": "GET"
    },
    "result": true
  },
  {
    "testTitle": "SSRF - URL encoding bypass attempt",
    "config": {
      "webhookUrl": "http://127.0.0.1%2f",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "testTitle": "SSRF - Decimal IP representation",
    "config": {
      "webhookUrl": "http://2130706433",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "testTitle": "SSRF - Octal IP representation",
    "config": {
      "webhookUrl": "http://0177.0000.0000.0001",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },

  {
    "testTitle": "SSRF - IPv6 mapped IPv4 address",
    "config": {
      "webhookUrl": "http://[::ffff:192.168.0.1]",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "testTitle": "SSRF - Hexadecimal IP representation",
    "config": {
      "webhookUrl": "http://0xC0A80001",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "testTitle": "SSRF - Mixed encoding",
    "config": {
      "webhookUrl": "http://127.0.0.1%0d%0aHost:example.com",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "testTitle": "SSRF - Double encoding",
    "config": {
      "webhookUrl": "http://127.0.0.1%252f",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "testTitle": "SSRF - IPv6 compressed",
    "config": {
      "webhookUrl": "http://[::127.0.0.1]",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "testTitle": "SSRF - Enclosed alphanumerics",
    "config": {
      "webhookUrl": "http://⑫⑦.⓪.⓪.①",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "testTitle": "SSRF - Punycode domain",
    "config": {
      "webhookUrl": "http://xn--80ak6aa92e.com",
      "webhookMethod": "GET"
    },
    "result": true
  },
  {
    "testTitle": "SSRF - URL with credentials",
    "config": {
      "webhookUrl": "http://user:password@example.com",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "testTitle": "SSRF - Data URL scheme",
    "config": {
      "webhookUrl": "data:text/plain;base64,SGVsbG8sIFdvcmxkIQ==",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "testTitle": "SSRF - Localhost with subdomain",
    "config": {
      "webhookUrl": "http://subdomain.localhost",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "testTitle": "SSRF - localhost with dash",
    "config": {
      "webhookUrl": "http://local-host",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "testTitle": "SSRF - localhost with numbers",
    "config": {
      "webhookUrl": "http://127.0.0.1.nip.io",
      "webhookMethod": "GET"
    },
    "result": true
  },
  {
    "testTitle": "SSRF - Dotless decimal IP",
    "config": {
      "webhookUrl": "http://2130706433",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "testTitle": "SSRF - Dotless hex IP",
    "config": {
      "webhookUrl": "http://0x7f000001",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "testTitle": "SSRF - IPv6 localhost",
    "config": {
      "webhookUrl": "http://[::1]",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "testTitle": "SSRF - IPv6 localhost with zone identifier",
    "config": {
      "webhookUrl": "http://[::1%25en0]",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "testTitle": "SSRF - Malformed IPv6",
    "config": {
      "webhookUrl": "http://0:0:0:0:0:ffff:127.0.0.1",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "testTitle": "SSRF - IPv6 with IPv4 address",
    "config": {
      "webhookUrl": "http://[0:0:0:0:0:ffff:127.0.0.1]",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "testTitle": "SSRF - Exotic protocols",
    "config": {
      "webhookUrl": "gopher://example.com/_TCP:80",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "testTitle": "SSRF - URL fragment",
    "config": {
      "webhookUrl": "http://example.com#@evil.com/",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "testTitle": "valid dns with port",
    "config": {
      "webhookUrl": "https://prod-47.eastus.logic.azure.com:443/workflows/abcd/triggers/manual/paths/invoke?apiKey=2019-05-01&routePath=%2Ftriggers%2Fmanual%2Frun&schemaVersion=1.0&authToken=povmeo",
      "webhookMethod": "GET"
    },
    "result": true
  },
  {
    "testTitle": "valid dns with port without query params & paths",
    "config": {
      "webhookUrl": "https://my-website.com:443",
      "webhookMethod": "GET"
    },
    "result": true
  },
  {
    "testTitle": "localhost with port",
    "config": {
      "webhookUrl": "http://localhost:443/workflows/abcd/triggers/manual/paths/invoke?apiKey=2019-05-01&routePath=%2Ftriggers%2Fmanual%2Frun&schemaVersion=1.0&authToken=povmeo",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "testTitle": ".localhost with port",
    "config": {
      "webhookUrl": "https://test.localhost:443",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "testTitle": "valid dns with port with invalid port",
    "config": {
      "webhookUrl": "https://example.com:abc",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "testTitle": "https://localhost with port",
    "config": {
      "webhookUrl": "http://localhost:9090",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "testTitle": "port cannot be greater than 65535",
    "config": {
      "webhookUrl": "http://valid.url:65540",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "testTitle": "port cannot be greater than 65535",
    "config": {
      "webhookUrl": "https://prod-47.eastus.logic.azure.com:4430111/workflows/abcd/triggers/manual/paths/invoke?apiKey=2019-05-01&routePath=%2Ftriggers%2Fmanual%2Frun&schemaVersion=1.0&authToken=povmeo",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  },
  {
    "testTitle": "valid dns and port with 2 digits",
    "config": {
      "webhookUrl": "https://prod-47.eastus.logic.azure.com:88/workflows/abcd/triggers/manual/paths/invoke?apiKey=2019-05-01&routePath=%2Ftriggers%2Fmanual%2Frun&schemaVersion=1.0&authToken=povmeo",
      "webhookMethod": "GET"
    },
    "result": true
  },
  {
    "testTitle": "port should have atleast 2 digits",
    "config": {
      "webhookUrl": "https://prod-47.eastus.logic.azure.com:8/workflows/abcd/triggers/manual/paths/invoke?apiKey=2019-05-01&routePath=%2Ftriggers%2Fmanual%2Frun&schemaVersion=1.0&authToken=povmeo",
      "webhookMethod": "GET"
    },
    "result": false,
    "err": [
      "webhookUrl must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(https?://)(?![a-zA-Z0-9-]*\\.ngrok\\.io)(?!localhost|.*\\.localhost)([a-zA-Z0-9-]{1,63}\\.)+[a-zA-Z]{2,}(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5]\\d{4}|[1-9]\\d{1,3}))?(/.*)?$\""
    ]
  }
]
