[
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "sslMode": "disable",
      "bucketProvider": "S3",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "bucketName": "test-bucket",
      "accessKeyID": "test-access-key-id",
      "accessKey": "test-access-key"
    },
    "result": true
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "sslMode": "disable",
      "bucketProvider": "S3",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": true,
      "iamRoleARN": "iam-role"
    },
    "result": true
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "sslMode": "disable",
      "bucketProvider": "S3",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "bucketName": "test-bucket",
      "accessKeyID": "test-access-key-id",
      "accessKey": "test-access-key",
      "roleBasedAuth": true,
      "iamRoleARN": "iam-role"
    },
    "result": true
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "sslMode": "disable",
      "bucketProvider": "S3",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "bucketName": "test-bucket"
    },
    "result": false,
    "err": [
      " must have required property 'accessKeyID'",
      " must have required property 'accessKey'",
      " must have required property 'iamRoleARN'",
      " must have required property 'roleBasedAuth'",
      " must match a schema in anyOf",
      " must match \"then\" schema"
    ]
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "sslMode": "disable",
      "bucketProvider": "S3",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "bucketName": "test-bucket",
      "accessKeyID": "test-access-key-id"
    },
    "result": false,
    "err": [
      " must have required property 'accessKey'",
      " must have required property 'iamRoleARN'",
      " must have required property 'roleBasedAuth'",
      " must match a schema in anyOf",
      " must match \"then\" schema"
    ]
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "sslMode": "disable",
      "bucketProvider": "S3",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": true
    },
    "result": false,
    "err": [
      " must have required property 'accessKeyID'",
      " must have required property 'accessKey'",
      "roleBasedAuth must be equal to constant",
      " must have required property 'iamRoleARN'",
      " must match a schema in anyOf",
      " must match \"then\" schema"
    ]
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "sslMode": "disable",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "bucketProvider": "GCS",
      "bucketName": "test-bucket",
      "endPoint": "",
      "useSSL": true,
      "credentials": "{}",
      "excludeWindow": {
        "excludeWindowStartTime": "",
        "excludeWindowEndTime": ""
      },
      "syncStartAt": "16:30"
    },
    "result": true
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "sslMode": "disable",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "bucketProvider": "AZURE_BLOB",
      "containerName": "test-container",
      "accountName": "test-account-name",
      "accountKey": "test-azure-account-key",
      "useSSL": true
    },
    "result": true
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "sslMode": "disable",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "bucketProvider": "AZURE_BLOB",
      "containerName": "test-container",
      "accountName": "test-account-name",
      "accountKey": "test-azure-account-key",
      "sasToken": "",
      "useSASTokens": false,
      "useSSL": true
    },
    "result": true
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "sslMode": "disable",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "bucketProvider": "AZURE_BLOB",
      "containerName": "test-container",
      "accountName": "test-account-name",
      "accountKey": "",
      "sasToken": "test-azure-sas-token",
      "useSASTokens": true,
      "useSSL": true
    },
    "result": true
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "sslMode": "disable",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "bucketProvider": "AZURE_BLOB",
      "containerName": "test-container",
      "accountName": "test-account-name",
      "accountKey": "test-azure-account-key",
      "sasToken": "test-azure-sas-token",
      "useSASTokens": true,
      "useSSL": true
    },
    "result": true
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "sslMode": "disable",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "bucketProvider": "AZURE_BLOB",
      "containerName": "test-container",
      "accountName": "test-account-name",
      "accountKey": "test-azure-account-key",
      "sasToken": "test-azure-sas-token",
      "useSASTokens": false,
      "useSSL": true
    },
    "result": true
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "sslMode": "disable",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "bucketProvider": "AZURE_BLOB",
      "containerName": "test-container",
      "accountName": "test-account-name",
      "useSSL": true
    },
    "result": false,
    "err": [
      " must have required property 'accountKey'",
      " must have required property 'sasToken'",
      " must have required property 'useSASTokens'",
      " must match a schema in anyOf",
      " must match \"then\" schema"
    ]
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "useRudderStorage": false,
      "sslMode": "disable",
      "bucketProvider": "MINIO",
      "syncFrequency": "30",
      "bucketName": "test-bucket",
      "accessKeyID": "test-access-key-id",
      "secretAccessKey": "test-secret-access-key",
      "endPoint": "https:test.com",
      "useSSL": true
    },
    "result": true
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "sslMode": "disable",
      "bucketProvider": "S3",
      "useRudderStorage": false,
      "syncFrequency": "30",
      "bucketName": "ab..ab",
      "accessKeyID": "test-access-key-id",
      "accessKey": "test-access-key"
    },
    "result": false,
    "err": [
      "bucketName must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^((?!^xn--)(?!.*\\.\\..*)(?!^(\\d+(\\.|$)){4}$)[a-z0-9][a-z0-9-.]{1,61}[a-z0-9])$\"",
      " must match \"then\" schema"
    ]
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "sslMode": "disable",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "bucketProvider": "GCS",
      "bucketName": "test..bucket",
      "endPoint": "",
      "useSSL": true,
      "credentials": "{}",
      "excludeWindow": {
        "excludeWindowStartTime": "",
        "excludeWindowEndTime": ""
      },
      "syncStartAt": "16:30"
    },
    "result": false,
    "err": [
      "bucketName must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^((?!goog)(?!.*google.*)(?!^(\\d+(\\.|$)){4}$)(?!.*\\.\\..*)[a-z0-9][a-z0-9-._]{1,61}[a-z0-9])$\"",
      " must match \"then\" schema"
    ]
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "sslMode": "disable",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "bucketProvider": "AZURE_BLOB",
      "containerName": "test--container",
      "accountName": "test-account-name",
      "accountKey": "test-azure-account-key",
      "useSSL": true
    },
    "result": false,
    "err": [
      "containerName must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(?=.{3,63}$)[a-z0-9]+(-[a-z0-9]+)*$\"",
      " must match \"then\" schema"
    ]
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "useRudderStorage": false,
      "sslMode": "disable",
      "bucketProvider": "MINIO",
      "syncFrequency": "30",
      "bucketName": "1.2.3.4",
      "accessKeyID": "test-access-key-id",
      "secretAccessKey": "test-secret-access-key",
      "endPoint": "https:test.com",
      "useSSL": true
    },
    "result": false,
    "err": [
      "bucketName must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^((?!^(\\d+(\\.|$)){4}$)[a-z0-9][a-z0-9-.]{1,61}[a-z0-9])$\"",
      " must match \"then\" schema"
    ]
  }
]
