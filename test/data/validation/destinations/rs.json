[
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": false,
      "accessKeyID": "",
      "accessKey": ""
    },
    "result": true
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "useIAMForAuth": false,
      "port": "0000",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": false,
      "accessKeyID": "",
      "accessKey": ""
    },
    "result": true
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "useIAMForAuth": false,
      "iamRoleARNForAuth": "",
      "clusterId": "",
      "clusterRegion": "",
      "port": "0000",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": false,
      "accessKeyID": "",
      "accessKey": ""
    },
    "result": true
  },
  {
    "config": {
      "database": "test-database",
      "user": "test-user",
      "useIAMForAuth": false,
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": false,
      "accessKeyID": "",
      "accessKey": ""
    },
    "result": false,
    "err": [
      " must have required property 'host'",
      " must have required property 'port'",
      " must have required property 'password'",
      " must match \"then\" schema"
    ]
  },
  {
    "config": {
      "host": "",
      "password": "",
      "port": "",
      "database": "test-database",
      "user": "test-user",
      "useIAMForAuth": true,
      "iamRoleARNForAuth": "iamRoleARNForAuth",
      "clusterId": "clusterId",
      "clusterRegion": "clusterRegion",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": false,
      "accessKeyID": "",
      "accessKey": ""
    },
    "result": true
  },
  {
    "config": {
      "database": "test-database",
      "user": "test-user",
      "useIAMForAuth": true,
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": false,
      "accessKeyID": "",
      "accessKey": ""
    },
    "result": false,
    "err": [
      " must have required property 'clusterId'",
      " must have required property 'clusterRegion'",
      " must have required property 'iamRoleARNForAuth'",
      " must match \"then\" schema"
    ]
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "roleBasedAuth": true,
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "accessKeyID": "test-access-key-id",
      "accessKey": "test-access-key",
      "iamRoleARN": "fdsf"
    },
    "result": true
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": true,
      "iamRoleARN": "iam-role"
    },
    "result": true
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": true
    },
    "result": false,
    "err": [
      "roleBasedAuth must be equal to constant",
      " must have required property 'iamRoleARN'",
      " must match a schema in anyOf",
      " must match \"then\" schema"
    ]
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "{{}}",
      "roleBasedAuth": false,
      "accessKeyID": "test-access-key-id",
      "accessKey": "test-access-key"
    },
    "result": false,
    "err": [
      "bucketName must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^((?!^xn--)(?!.*\\.\\..*)(?!^(\\d+(\\.|$)){4}$)[a-z0-9][a-z0-9-.]{1,61}[a-z0-9])$|(^\\{\\{.+\\}\\}$)\"",
      " must match \"then\" schema"
    ]
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "{{ TEST_BUCKET }}",
      "roleBasedAuth": false,
      "accessKeyID": "test-access-key-id",
      "accessKey": "test-access-key"
    },
    "result": true
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "useSSH": false,
      "sslMode": "disable",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "syncFrequency": "30",
      "roleBasedAuth": false,
      "bucketName": "ab..ab",
      "accessKeyID": "test-access-key-id",
      "accessKey": "test-access-key"
    },
    "result": false,
    "err": [
      "bucketName must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^((?!^xn--)(?!.*\\.\\..*)(?!^(\\d+(\\.|$)){4}$)[a-z0-9][a-z0-9-.]{1,61}[a-z0-9])$|(^\\{\\{.+\\}\\}$)\"",
      " must match \"then\" schema"
    ]
  },
  {
    "config": {
      "host": "test-host",
      "port": "0000",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "namespace": "iosSource",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "jsonPaths": "testMap.nestedMap",
      "useRudderStorage": false,
      "bucketName": "{{ TEST_BUCKET }}",
      "prefix": "rudder",
      "roleBasedAuth": false,
      "accessKeyID": "test-access-key-id",
      "accessKey": "test-access-key",
      "useSTSTokens": false
    },
    "result": true
  },
  {
    "config": {
      "host": "test-host",
      "port": "0000",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "namespace": "iosSource",
      "useSSH": true,
      "sshHost": "www.abc.com",
      "sshPort": "22",
      "sshUser": "user1",
      "sshPublicKey": "sshpublicKey12345",
      "syncFrequency": "30",
      "enableSSE": false,
      "jsonPaths": "testMap.nestedMap",
      "useRudderStorage": false,
      "bucketName": "{{ TEST_BUCKET }}",
      "prefix": "rudder",
      "roleBasedAuth": false,
      "accessKeyID": "test-access-key-id",
      "accessKey": "test-access-key",
      "useSTSTokens": false
    },
    "result": true
  },
  {
    "testTitle": "With valid multiple consent management providers config",
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": false,
      "accessKeyID": "",
      "accessKey": "",
      "consentManagement": {
        "web": [
          {
            "provider": "custom",
            "consents": [
              {
                "consent": "Marketing"
              }
            ],
            "resolutionStrategy": "or"
          },
          {
            "provider": "oneTrust",
            "consents": [
              {
                "consent": "Marketing"
              }
            ]
          },
          {
            "provider": "ketch",
            "consents": []
          }
        ]
      }
    },
    "result": true
  },
  {
    "testTitle": "With consent management custom provider config and invalid resolutionStrategy value",
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": false,
      "accessKeyID": "",
      "accessKey": "",
      "consentManagement": {
        "android": [
          {
            "provider": "custom",
            "resolutionStrategy": "nor"
          }
        ]
      }
    },
    "result": false,
    "err": [
      "consentManagement.android.0.resolutionStrategy must be equal to one of the allowed values",
      "consentManagement.android.0 must match \"then\" schema"
    ]
  },
  {
    "testTitle": "With consent management custom provider config and no resolutionStrategy value",
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": false,
      "accessKeyID": "",
      "accessKey": "",
      "consentManagement": {
        "android": [
          {
            "provider": "custom"
          }
        ]
      }
    },
    "result": false,
    "err": [
      "consentManagement.android.0 must have required property 'resolutionStrategy'",
      "consentManagement.android.0 must match \"then\" schema"
    ]
  },
  {
    "testTitle": "With consent management OneTrust provider config and no resolutionStrategy value",
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": false,
      "accessKeyID": "",
      "accessKey": "",
      "consentManagement": {
        "android": [
          {
            "provider": "oneTrust"
          }
        ]
      }
    },
    "result": true
  },
  {
    "testTitle": "With consent management custom provider config invalid provider value",
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": false,
      "accessKeyID": "",
      "accessKey": "",
      "consentManagement": {
        "android": [
          {
            "provider": "dummyProvider"
          }
        ]
      }
    },
    "result": false,
    "err": ["consentManagement.android.0.provider must be equal to one of the allowed values"]
  }
]
