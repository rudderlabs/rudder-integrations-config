[
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": false,
      "accessKeyID": "",
      "accessKey": ""
    },
    "result": true
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "useIAMForAuth": false,
      "port": "0000",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": false,
      "accessKeyID": "",
      "accessKey": ""
    },
    "result": true
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "useIAMForAuth": false,
      "iamRoleARNForAuth": "",
      "clusterId": "",
      "clusterRegion": "",
      "port": "0000",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": false,
      "accessKeyID": "",
      "accessKey": ""
    },
    "result": true
  },
  {
    "config": {
      "database": "test-database",
      "user": "test-user",
      "useIAMForAuth": false,
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": false,
      "accessKeyID": "",
      "accessKey": ""
    },
    "result": false,
    "err": [
      " must have required property 'host'",
      " must have required property 'port'",
      " must have required property 'password'",
      " must match \"then\" schema"
    ]
  },
  {
    "config": {
      "host": "",
      "password": "",
      "port": "",
      "database": "test-database",
      "user": "test-user",
      "useIAMForAuth": true,
      "iamRoleARNForAuth": "iamRoleARNForAuth",
      "clusterId": "clusterId",
      "clusterRegion": "clusterRegion",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": false,
      "accessKeyID": "",
      "accessKey": ""
    },
    "result": true
  },
  {
    "config": {
      "database": "test-database",
      "user": "test-user",
      "useIAMForAuth": true,
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": false,
      "accessKeyID": "",
      "accessKey": ""
    },
    "result": false,
    "err": [
      " must have required property 'clusterId'",
      " must have required property 'clusterRegion'",
      " must have required property 'iamRoleARNForAuth'",
      " must match \"then\" schema"
    ]
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "roleBasedAuth": true,
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "accessKeyID": "test-access-key-id",
      "accessKey": "test-access-key",
      "iamRoleARN": "fdsf"
    },
    "result": true
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": true,
      "iamRoleARN": "iam-role"
    },
    "result": true
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": true
    },
    "result": false,
    "err": [
      "roleBasedAuth must be equal to constant",
      " must have required property 'iamRoleARN'",
      " must match a schema in anyOf",
      " must match \"then\" schema"
    ]
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "{{}}",
      "roleBasedAuth": false,
      "accessKeyID": "test-access-key-id",
      "accessKey": "test-access-key"
    },
    "result": false,
    "err": [
      "bucketName must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^((?!^xn--)(?!.*\\.\\..*)(?!^(\\d+(\\.|$)){4}$)[a-z0-9][a-z0-9-.]{1,61}[a-z0-9])$|(^\\{\\{.+\\}\\}$)\"",
      " must match \"then\" schema"
    ]
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "{{ TEST_BUCKET }}",
      "roleBasedAuth": false,
      "accessKeyID": "test-access-key-id",
      "accessKey": "test-access-key"
    },
    "result": true
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "useSSH": false,
      "sslMode": "disable",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "syncFrequency": "30",
      "roleBasedAuth": false,
      "bucketName": "ab..ab",
      "accessKeyID": "test-access-key-id",
      "accessKey": "test-access-key"
    },
    "result": false,
    "err": [
      "bucketName must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^((?!^xn--)(?!.*\\.\\..*)(?!^(\\d+(\\.|$)){4}$)[a-z0-9][a-z0-9-.]{1,61}[a-z0-9])$|(^\\{\\{.+\\}\\}$)\"",
      " must match \"then\" schema"
    ]
  },
  {
    "config": {
      "host": "test-host",
      "port": "0000",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "namespace": "iosSource",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "jsonPaths": "testMap.nestedMap",
      "useRudderStorage": false,
      "bucketName": "{{ TEST_BUCKET }}",
      "prefix": "rudder",
      "roleBasedAuth": false,
      "accessKeyID": "test-access-key-id",
      "accessKey": "test-access-key",
      "useSTSTokens": false
    },
    "result": true
  },
  {
    "config": {
      "host": "test-host",
      "port": "0000",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "namespace": "iosSource",
      "useSSH": true,
      "sshHost": "www.abc.com",
      "sshPort": "22",
      "sshUser": "user1",
      "sshPublicKey": "sshpublicKey12345",
      "syncFrequency": "30",
      "enableSSE": false,
      "jsonPaths": "testMap.nestedMap",
      "useRudderStorage": false,
      "bucketName": "{{ TEST_BUCKET }}",
      "prefix": "rudder",
      "roleBasedAuth": false,
      "accessKeyID": "test-access-key-id",
      "accessKey": "test-access-key",
      "useSTSTokens": false
    },
    "result": true
  },
  {
    "testTitle": "With valid multiple consent management providers config",
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": false,
      "accessKeyID": "",
      "accessKey": "",
      "consentManagement": {
        "web": [
          {
            "provider": "custom",
            "consents": [
              {
                "consent": "Marketing"
              }
            ],
            "resolutionStrategy": "or"
          },
          {
            "provider": "oneTrust",
            "consents": [
              {
                "consent": "Marketing"
              }
            ]
          },
          {
            "provider": "ketch",
            "consents": []
          }
        ]
      }
    },
    "result": true
  },
  {
    "testTitle": "With consent management custom provider config and invalid resolutionStrategy value",
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": false,
      "accessKeyID": "",
      "accessKey": "",
      "consentManagement": {
        "android": [
          {
            "provider": "custom",
            "resolutionStrategy": "nor"
          }
        ]
      }
    },
    "result": false,
    "err": [
      "consentManagement.android.0.resolutionStrategy must be equal to one of the allowed values",
      "consentManagement.android.0 must match \"then\" schema"
    ]
  },
  {
    "testTitle": "With consent management custom provider config and no resolutionStrategy value",
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": false,
      "accessKeyID": "",
      "accessKey": "",
      "consentManagement": {
        "android": [
          {
            "provider": "custom"
          }
        ]
      }
    },
    "result": false,
    "err": [
      "consentManagement.android.0 must have required property 'resolutionStrategy'",
      "consentManagement.android.0 must match \"then\" schema"
    ]
  },
  {
    "testTitle": "With consent management OneTrust provider config and no resolutionStrategy value",
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": false,
      "accessKeyID": "",
      "accessKey": "",
      "consentManagement": {
        "android": [
          {
            "provider": "oneTrust"
          }
        ]
      }
    },
    "result": true
  },
  {
    "testTitle": "With consent management custom provider config invalid provider value",
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": false,
      "accessKeyID": "",
      "accessKey": "",
      "consentManagement": {
        "android": [
          {
            "provider": "dummyProvider"
          }
        ]
      }
    },
    "result": false,
    "err": ["consentManagement.android.0.provider must be equal to one of the allowed values"]
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": false,
      "accessKeyID": "",
      "accessKey": "",
      "oneTrustCookieCategories": {
        "android": [
          {
            "oneTrustCookieCategory": "C0001"
          },
          {
            "oneTrustCookieCategory": "C0002"
          }
        ],
        "ios": [
          {
            "oneTrustCookieCategory": "C0003"
          },
          {
            "oneTrustCookieCategory": "C0004"
          }
        ],
        "web": [
          {
            "oneTrustCookieCategory": ""
          }
        ],
        "unity": [],
        "amp": [
          {
            "oneTrustCookieCategory": "env.ENVIRONMENT_VARIABLE"
          }
        ],
        "cloud": [
          {
            "oneTrustCookieCategory": "{{ event.properties.prop1 || 'val' }}"
          }
        ],
        "reactnative": [
          {
            "oneTrustCookieCategory": "C0001"
          },
          {
            "oneTrustCookieCategory": "C0002"
          }
        ],
        "cloudSource": [
          {
            "oneTrustCookieCategory": "C0003"
          },
          {
            "oneTrustCookieCategory": "C0004"
          }
        ],
        "flutter": [
          {
            "oneTrustCookieCategory": ""
          }
        ],
        "cordova": [],
        "shopify": [
          {
            "oneTrustCookieCategory": "env.ENVIRONMENT_VARIABLE"
          }
        ]
      },
      "ketchConsentPurposes": {
        "android": [
          {
            "purpose": "P1"
          },
          {
            "purpose": "P2"
          }
        ],
        "ios": [
          {
            "purpose": "P3"
          },
          {
            "purpose": "P4"
          }
        ],
        "web": [
          {
            "purpose": ""
          }
        ],
        "unity": [],
        "amp": [
          {
            "purpose": "env.ENVIRONMENT_VARIABLE"
          }
        ],
        "cloud": [
          {
            "purpose": "{{ event.properties.prop1 || 'val' }}"
          }
        ],
        "reactnative": [
          {
            "purpose": "P1"
          },
          {
            "purpose": "P2"
          }
        ],
        "cloudSource": [
          {
            "purpose": "P3"
          },
          {
            "purpose": "P4"
          }
        ],
        "flutter": [
          {
            "purpose": ""
          }
        ],
        "cordova": [],
        "shopify": [
          {
            "purpose": "env.ENVIRONMENT_VARIABLE"
          }
        ]
      }
    },
    "result": true
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": false,
      "accessKeyID": "",
      "accessKey": "",
      "oneTrustCookieCategories": [
        {
          "oneTrustCookieCategory": "C0001"
        },
        {
          "oneTrustCookieCategory": "C0002"
        }
      ],
      "ketchConsentPurposes": [
        {
          "purpose": "P1"
        },
        {
          "purpose": "P2"
        }
      ]
    },
    "result": false,
    "err": ["oneTrustCookieCategories must be object", "ketchConsentPurposes must be object"]
  },
  {
    "config": {
      "host": "test-host",
      "database": "test-database",
      "user": "test-user",
      "password": "test-password",
      "port": "0000",
      "useSSH": false,
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": false,
      "accessKeyID": "",
      "accessKey": "",
      "oneTrustCookieCategories": {
        "android": [
          {
            "oneTrustCookieCategory": "more than 100 characters string - AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
          },
          {
            "oneTrustCookieCategory": "C0004"
          }
        ],
        "ios": [
          {
            "oneTrustCookieCategory": {
              "not": "a string"
            }
          },
          {
            "oneTrustCookieCategory": "C0004"
          }
        ],
        "web": {
          "not": "an array"
        },
        "unity": [
          "not an object",
          {
            "oneTrustCookieCategory": "C0004"
          }
        ]
      },
      "ketchConsentPurposes": {
        "android": [
          {
            "purpose": "more than 100 characters string - AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
          },
          {
            "purpose": "P4"
          }
        ],
        "ios": [
          {
            "purpose": {
              "not": "a string"
            }
          },
          {
            "purpose": "P4"
          }
        ],
        "web": {
          "not": "an array"
        },
        "unity": [
          "not an object",
          {
            "purpose": "P4"
          }
        ]
      }
    },
    "result": false,
    "err": [
      "oneTrustCookieCategories.android.0.oneTrustCookieCategory must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(.{0,100})$\"",
      "oneTrustCookieCategories.ios.0.oneTrustCookieCategory must be string",
      "oneTrustCookieCategories.web must be array",
      "oneTrustCookieCategories.unity.0 must be object",
      "ketchConsentPurposes.android.0.purpose must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(.{0,100})$\"",
      "ketchConsentPurposes.ios.0.purpose must be string",
      "ketchConsentPurposes.web must be array",
      "ketchConsentPurposes.unity.0 must be object"
    ]
  }
]
