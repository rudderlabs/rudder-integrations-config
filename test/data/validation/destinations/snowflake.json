[
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "cloudProvider": "AWS",
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "prefix": "test-prefix",
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "accessKeyID": "test-access-key-id",
      "accessKey": "test-access-key",
      "oneTrustCookieCategories": {
        "web": [
          {
            "oneTrustCookieCategory": "C0001"
          },
          {
            "oneTrustCookieCategory": "C0002"
          }
        ],
        "flutter": [
          {
            "oneTrustCookieCategory": "C0003"
          },
          {
            "oneTrustCookieCategory": "C0004"
          }
        ],
        "android": [
          {
            "oneTrustCookieCategory": ""
          }
        ],
        "ios": [
          {
            "oneTrustCookieCategory": "env.ENVIRONMENT_VARIABLE"
          }
        ],
        "cordova": [
          {
            "oneTrustCookieCategory": "{{ event.properties.prop1 || 333 }}"
          }
        ]
      },
      "ketchConsentPurposes": {
        "web": [
          {
            "purpose": "P1"
          },
          {
            "purpose": "P2"
          }
        ],
        "flutter": [
          {
            "purpose": "P3"
          },
          {
            "purpose": "P4"
          }
        ],
        "android": [
          {
            "purpose": ""
          }
        ],
        "ios": [
          {
            "purpose": "env.ENVIRONMENT_VARIABLE"
          }
        ],
        "cordova": [
          {
            "purpose": "{{ event.properties.prop1 || 333 }}"
          }
        ]
      }
    },
    "result": true
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "cloudProvider": "AWS",
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "prefix": "test-prefix",
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": true,
      "iamRoleARN": "iam-role"
    },
    "result": true
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "cloudProvider": "AWS",
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "prefix": "test-prefix",
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "oneTrustCookieCategories": [
        {
          "oneTrustCookieCategory": "C0001"
        },
        {
          "oneTrustCookieCategory": "C0002"
        }
      ],
      "ketchConsentPurposes": [
        {
          "purpose": "P1"
        },
        {
          "purpose": "P2"
        }
      ]
    },
    "result": false,
    "err": [
      " must have required property 'accessKeyID'",
      " must have required property 'accessKey'",
      " must have required property 'iamRoleARN'",
      "roleBasedAuth must be equal to constant",
      " must match a schema in anyOf",
      " must match \"then\" schema",
      "oneTrustCookieCategories must be object",
      "ketchConsentPurposes must be object"
    ]
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "cloudProvider": "AWS",
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "prefix": "test-prefix",
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "accessKeyID": "test-access-key-id"
    },
    "result": false,
    "err": [
      " must have required property 'accessKey'",
      " must have required property 'iamRoleARN'",
      "roleBasedAuth must be equal to constant",
      " must match a schema in anyOf",
      " must match \"then\" schema"
    ]
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "cloudProvider": "AWS",
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "prefix": "test-prefix",
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": true
    },
    "result": false,
    "err": [
      " must have required property 'accessKeyID'",
      " must have required property 'accessKey'",
      "roleBasedAuth must be equal to constant",
      " must have required property 'iamRoleARN'",
      " must match a schema in anyOf",
      " must match \"then\" schema"
    ]
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "role": "test-role",
      "password": "test-password",
      "cloudProvider": "AWS",
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "prefix": "test-prefix",
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "accessKeyID": "test-access-key-id",
      "accessKey": "test-access-key"
    },
    "result": true
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "sslMode": "disable",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "storageIntegration": "gcp_int",
      "prefix": "",
      "cloudProvider": "GCP",
      "bucketName": "test-bucket",
      "endPoint": "",
      "useSSL": true,
      "credentials": "{}",
      "excludeWindow": {
        "excludeWindowStartTime": "",
        "excludeWindowEndTime": ""
      },
      "syncStartAt": "16:30"
    },
    "result": true
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "sslMode": "disable",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "sasToken": "sas-token",
      "useSASTokens": false,
      "storageIntegration": "gcp_int",
      "cloudProvider": "AZURE",
      "containerName": "test-container",
      "accountName": "test-account-name",
      "accountKey": "test-azure-account-key",
      "useSSL": true
    },
    "result": true
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "sslMode": "disable",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "cloudProvider": "AZURE",
      "storageIntegration": "gcp_int",
      "containerName": "test-container",
      "accountName": "test-account-name",
      "accountKey": "test-azure-account-key",
      "sasToken": "",
      "useSASTokens": false,
      "useSSL": true
    },
    "result": true
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "sslMode": "disable",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "cloudProvider": "AZURE",
      "storageIntegration": "gcp_int",
      "containerName": "test-container",
      "accountName": "test-account-name",
      "accountKey": "",
      "sasToken": "test-azure-sas-token",
      "useSASTokens": true,
      "useSSL": true
    },
    "result": true
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "sslMode": "disable",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "cloudProvider": "AZURE",
      "storageIntegration": "gcp_int",
      "containerName": "test-container",
      "accountName": "test-account-name",
      "accountKey": "test-azure-account-key",
      "sasToken": "test-azure-sas-token",
      "useSASTokens": true,
      "useSSL": true
    },
    "result": true
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "sslMode": "disable",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "storageIntegration": "gcp_int",
      "cloudProvider": "AZURE",
      "containerName": "test-container",
      "accountName": "test-account-name",
      "accountKey": "test-azure-account-key",
      "sasToken": "test-azure-sas-token",
      "useSASTokens": false,
      "useSSL": true
    },
    "result": true
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "sslMode": "disable",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "storageIntegration": "gcp_int",
      "cloudProvider": "AZURE",
      "containerName": "test-container",
      "accountName": "test-account-name",
      "useSSL": true
    },
    "result": false,
    "err": [
      " must have required property 'accountKey'",
      " must have required property 'sasToken'",
      " must have required property 'useSASTokens'",
      " must match a schema in anyOf",
      " must match \"then\" schema"
    ]
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "sslMode": "disable",
      "cloudProvider": "AWS",
      "enableSSE": false,
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "storageIntegration": "gcp_int",
      "prefix": "test-prefix",
      "useSTSTokens": false,
      "syncFrequency": "30",
      "bucketName": "ab..ab",
      "accessKeyID": "test-access-key-id",
      "accessKey": "test-access-key"
    },
    "result": false,
    "err": [
      "bucketName must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^((?!^xn--)(?!.*\\.\\..*)(?!^(\\d+(\\.|$)){4}$)[a-z0-9][a-z0-9-.]{1,61}[a-z0-9])$\"",
      " must match \"then\" schema"
    ]
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "sslMode": "disable",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "prefix": "test-prefix",
      "cloudProvider": "GCP",
      "bucketName": "test..bucket",
      "storageIntegration": "gcp_int",
      "endPoint": "",
      "useSSL": true,
      "credentials": "{}",
      "excludeWindow": {
        "excludeWindowStartTime": "",
        "excludeWindowEndTime": ""
      },
      "syncStartAt": "16:30"
    },
    "result": false,
    "err": [
      "bucketName must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^((?!goog)(?!.*google.*)(?!^(\\d+(\\.|$)){4}$)(?!.*\\.\\..*)[a-z0-9][a-z0-9-._]{1,61}[a-z0-9])$\"",
      " must match \"then\" schema"
    ]
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "sslMode": "disable",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "prefix": "test-prefix",
      "cloudProvider": "AZURE",
      "containerName": "test--container",
      "accountName": "test-account-name",
      "useSASTokens": true,
      "storageIntegration": "gcp_int",
      "sasToken": "sas-token",
      "accountKey": "test-azure-account-key",
      "useSSL": true
    },
    "result": false,
    "err": [
      "containerName must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(?=.{3,63}$)[a-z0-9]+(-[a-z0-9]+)*$\"",
      " must match \"then\" schema"
    ]
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "cloudProvider": "AWS",
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "prefix": "test-prefix",
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "accessKeyID": "test-access-key-id",
      "accessKey": "test-access-key",
      "oneTrustCookieCategories": {
        "someunsupportedsourcetype": [
          {
            "oneTrustCookieCategory": "C0001"
          },
          {
            "oneTrustCookieCategory": "C0002"
          }
        ],
        "web": [
          {
            "someunsupportedkey": "C0001"
          },
          {
            "oneTrustCookieCategory": "C0002"
          }
        ],
        "flutter": [],
        "android": [
          {
            "oneTrustCookieCategory": "more than 100 characters string - AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
          },
          {
            "oneTrustCookieCategory": "C0004"
          }
        ],
        "ios": [
          {
            "oneTrustCookieCategory": {
              "not": "a string"
            }
          },
          {
            "oneTrustCookieCategory": "C0004"
          }
        ],
        "cordova": {
          "not": "an array"
        },
        "reactnative": [
          "not an object",
          {
            "oneTrustCookieCategory": "C0004"
          }
        ]
      },
      "ketchConsentPurposes": {
        "someunsupportedsourcetype": [
          {
            "purpose": "P1"
          },
          {
            "purpose": "P2"
          }
        ],
        "web": [
          {
            "someunsupportedkey": "P1"
          },
          {
            "purpose": "P2"
          }
        ],
        "flutter": [],
        "android": [
          {
            "purpose": "more than 100 characters string - AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
          },
          {
            "purpose": "P4"
          }
        ],
        "ios": [
          {
            "purpose": {
              "not": "a string"
            }
          },
          {
            "purpose": "P4"
          }
        ],
        "cordova": {
          "not": "an array"
        },
        "reactnative": [
          "not an object",
          {
            "purpose": "P4"
          }
        ]
      }
    },
    "result": false,
    "err": [
      "oneTrustCookieCategories must NOT have additional properties",
      "oneTrustCookieCategories.web.0 must NOT have additional properties",
      "oneTrustCookieCategories.android.0.oneTrustCookieCategory must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(.{0,100})$\"",
      "oneTrustCookieCategories.ios.0.oneTrustCookieCategory must be string",
      "oneTrustCookieCategories.reactnative.0 must be object",
      "oneTrustCookieCategories.flutter must NOT have fewer than 1 items",
      "oneTrustCookieCategories.cordova must be array",
      "ketchConsentPurposes must NOT have additional properties",
      "ketchConsentPurposes.web.0 must NOT have additional properties",
      "ketchConsentPurposes.android.0.purpose must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(.{0,100})$\"",
      "ketchConsentPurposes.ios.0.purpose must be string",
      "ketchConsentPurposes.reactnative.0 must be object",
      "ketchConsentPurposes.flutter must NOT have fewer than 1 items",
      "ketchConsentPurposes.cordova must be array"
    ]
  }
]
