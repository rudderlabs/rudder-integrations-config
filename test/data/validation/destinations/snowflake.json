[
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "cloudProvider": "AWS",
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "prefix": "test-prefix",
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "accessKeyID": "test-access-key-id",
      "accessKey": "test-access-key"
    },
    "result": true
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "useKeyPairAuth": false,
      "cloudProvider": "AWS",
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "prefix": "test-prefix",
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "accessKeyID": "test-access-key-id",
      "accessKey": "test-access-key"
    },
    "result": true
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "privateKey": "-----BEGIN PRIVATE KEY-----\ntest\ntest\n-----END PRIVATE KEY-----\n",
      "privateKeyPassphrase": "test-passphrase",
      "useKeyPairAuth": true,
      "cloudProvider": "AWS",
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "prefix": "test-prefix",
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "accessKeyID": "test-access-key-id",
      "accessKey": "test-access-key"
    },
    "result": true
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "privateKey": "-----BEGIN PRIVATE KEY-----\ntest\ntest\n-----END PRIVATE KEY-----\n",
      "privateKeyPassphrase": "test-passphrase",
      "useKeyPairAuth": true,
      "cloudProvider": "AWS",
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "prefix": "test-prefix",
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "accessKeyID": "test-access-key-id",
      "accessKey": "test-access-key"
    },
    "result": true
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "useKeyPairAuth": false,
      "privateKey": "-----BEGIN ENCRYPTED PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDc8ZNXUnjd7MFh\nIxI/eNDivAgA/s9fpBkX4WqjL6rBY8iZdBChp5dGIePp4IZ8zUBLGPSZdmNqnMyP\n/jDF+AZelv31ZmTqYz3AZ+VrWFK/7ciZqIfQFsRLPIdeKZTx8HiY1Od9hlnqeU0F\nSFDSDEH2XIfhXYunz0PswJHz0W+mqw/IgfAnEvy1pguBHfKPaWMLNMy0luKcx3tg\nI13H4enG4MtMiX6MERFb3CZtmf4pMIyTAyOqFQ/GWEYNpOwtiBIHlpVIiYy8cNyx\nlyhoLtLUv6cCNJj3HonoeiUSyiOVgLdxCir3S7HuaR1cPcuC4f2B2hq7jdVEYfkx\nR6XjRvRtAgMBAAECggEAB5r23gO20+LQBvKLW1fNZESh3OY93VZbeRo3ZBMiZFeg\nN9dfhtpV53eIA3deVxeZ8zZ9HaGONgUG40ercPZtl7NzCKUOlmU1+AnLg04DboZg\n8u3IG7EGREBljiejGs89g3tEAFWP16BMdwEAgTPOpcw/xCbxb/m/O5F8ZKwXVQwQ\nKlfxzIUjB3rXrhKXexAgQ+VAM3Ez0oDvoyF3g+a4oq0VHSPwi3EAHQzp21ceHyZA\nnHFb2us6vdwl7gD4G9/88Uoi8x/MH3+RKRQrqCnlSJbV1bGVPf6EGBNXc9Pw0Iym\n0BckaHtCBFnOrTjCOMnHxyPfdS6Vedo6evZjHMDvkQKBgQD0Y2/18auLF/X3q1Wh\n2jHhDZSjC080uwZqyPAot+vlMj6Wvl7tKTsRF6SpPO3nyqz5aMdw5V0WCZWXHrAq\nK6GtrHmzmTBTbvbDNEUEFqqW3JUTavL3uf7N9JsNWx/gORCjHzGoAvJlVBb3GHvS\nRTZzDcnM+5RJVonvYP93Q6zAsQKBgQDncPkb9pm86kqeRUhv1yT+B9satRVXC/ew\nazIwNQhP8UsMcYaM4RrgdUZMlSupUrKyK4NklmP7ivl2BAcGUh5vB393zrdpepns\nBkWVycoMiWgLL3N0XioZG9oT1Jh1hSSVfQ7gtlUZxUiHayu241JDTSbKNi2AkceL\nysFjdeI+fQKBgQDEYJr48Gc979UQXTcERcbK5xTHJzFQV/DCIhEJRzFhDMzKaNLy\nk60JAQypiXJKTcxM5etNRqFUMgNoWZqJaGIUooFw1enFQWc8WGYU8PnHHB0Wa1wt\nv+GGMcXeJ5knnfNGgKxwK14IGlgR2jS1NDSaozvDYW04uTdBiZn+hfztIQKBgAgd\ng/6hBP8E0B0AnOufBaMKr3oeQ2NL/iFngNkD4wi6k0EacfdapVCdjBt/V4qWZcGt\nmOvcAiF93AVxWrW0B3EpOCUBUJkYPXFzPtlju/v4jXdm8ItyCdPbkCgF2lq0knXT\nbsQeYJmIu2RUM7I0AlxtxiBtCedqNS8HqwRLy+UZAoGBANAFLCMR4gw+CZZx4yBL\ny52L4OVodOgAZuRE1ziaRNacJaAFJGW3qh74LFoqNcgkfduZ4QvyMj70AINBzm5J\nb0G/T1obwVOPn7tmBZNDNuIkRXnZZ/2/ym1dpBBvPiYLVawYMJlH2nHZdXhDZZnn\n4uLN79yw0szmUnTUlm1wFRsB\n-----END ENCRYPTED PRIVATE KEY-----\n",
      "privateKeyPassphrase": "test-passphrase",
      "cloudProvider": "AWS",
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "prefix": "test-prefix",
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "accessKeyID": "test-access-key-id",
      "accessKey": "test-access-key"
    },
    "result": false,
    "err": [" must have required property 'password'", " must match \"then\" schema"]
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "useKeyPairAuth": true,
      "cloudProvider": "AWS",
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "prefix": "test-prefix",
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "accessKeyID": "test-access-key-id",
      "accessKey": "test-access-key"
    },
    "result": false,
    "err": [" must have required property 'privateKey'", " must match \"then\" schema"]
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "cloudProvider": "AWS",
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "prefix": "test-prefix",
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": true,
      "iamRoleARN": "iam-role"
    },
    "result": true
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "cloudProvider": "AWS",
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "prefix": "test-prefix",
      "useSTSTokens": false,
      "bucketName": "test-bucket"
    },
    "result": false,
    "err": [
      " must have required property 'accessKeyID'",
      " must have required property 'accessKey'",
      " must have required property 'iamRoleARN'",
      "roleBasedAuth must be equal to constant",
      " must match a schema in anyOf",
      " must match \"then\" schema"
    ]
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "cloudProvider": "AWS",
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "prefix": "test-prefix",
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "accessKeyID": "test-access-key-id"
    },
    "result": false,
    "err": [
      " must have required property 'accessKey'",
      " must have required property 'iamRoleARN'",
      "roleBasedAuth must be equal to constant",
      " must match a schema in anyOf",
      " must match \"then\" schema"
    ]
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "cloudProvider": "AWS",
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "prefix": "test-prefix",
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "roleBasedAuth": true
    },
    "result": false,
    "err": [
      " must have required property 'accessKeyID'",
      " must have required property 'accessKey'",
      "roleBasedAuth must be equal to constant",
      " must have required property 'iamRoleARN'",
      " must match a schema in anyOf",
      " must match \"then\" schema"
    ]
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "role": "test-role",
      "password": "test-password",
      "cloudProvider": "AWS",
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "prefix": "test-prefix",
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "accessKeyID": "test-access-key-id",
      "accessKey": "test-access-key"
    },
    "result": true
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "sslMode": "disable",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "storageIntegration": "gcp_int",
      "prefix": "",
      "cloudProvider": "GCP",
      "bucketName": "test-bucket",
      "endPoint": "",
      "useSSL": true,
      "credentials": "{}",
      "excludeWindow": {
        "excludeWindowStartTime": "",
        "excludeWindowEndTime": ""
      },
      "syncStartAt": "16:30"
    },
    "result": true
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "sslMode": "disable",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "sasToken": "sas-token",
      "useSASTokens": false,
      "storageIntegration": "gcp_int",
      "cloudProvider": "AZURE",
      "containerName": "test-container",
      "accountName": "test-account-name",
      "accountKey": "test-azure-account-key",
      "useSSL": true
    },
    "result": true
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "sslMode": "disable",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "cloudProvider": "AZURE",
      "storageIntegration": "gcp_int",
      "containerName": "test-container",
      "accountName": "test-account-name",
      "accountKey": "test-azure-account-key",
      "sasToken": "",
      "useSASTokens": false,
      "useSSL": true
    },
    "result": true
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "sslMode": "disable",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "cloudProvider": "AZURE",
      "storageIntegration": "gcp_int",
      "containerName": "test-container",
      "accountName": "test-account-name",
      "accountKey": "",
      "sasToken": "test-azure-sas-token",
      "useSASTokens": true,
      "useSSL": true
    },
    "result": true
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "sslMode": "disable",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "cloudProvider": "AZURE",
      "storageIntegration": "gcp_int",
      "containerName": "test-container",
      "accountName": "test-account-name",
      "accountKey": "test-azure-account-key",
      "sasToken": "test-azure-sas-token",
      "useSASTokens": true,
      "useSSL": true
    },
    "result": true
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "sslMode": "disable",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "storageIntegration": "gcp_int",
      "cloudProvider": "AZURE",
      "containerName": "test-container",
      "accountName": "test-account-name",
      "accountKey": "test-azure-account-key",
      "sasToken": "test-azure-sas-token",
      "useSASTokens": false,
      "useSSL": true
    },
    "result": true
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "sslMode": "disable",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "storageIntegration": "gcp_int",
      "cloudProvider": "AZURE",
      "containerName": "test-container",
      "accountName": "test-account-name",
      "useSSL": true
    },
    "result": false,
    "err": [
      " must have required property 'accountKey'",
      " must have required property 'sasToken'",
      " must have required property 'useSASTokens'",
      " must match a schema in anyOf",
      " must match \"then\" schema"
    ]
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "sslMode": "disable",
      "cloudProvider": "AWS",
      "enableSSE": false,
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "storageIntegration": "gcp_int",
      "prefix": "test-prefix",
      "useSTSTokens": false,
      "syncFrequency": "30",
      "bucketName": "ab..ab",
      "accessKeyID": "test-access-key-id",
      "accessKey": "test-access-key"
    },
    "result": false,
    "err": [
      "bucketName must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^((?!^xn--)(?!.*\\.\\..*)(?!^(\\d+(\\.|$)){4}$)[a-z0-9][a-z0-9-.]{1,61}[a-z0-9])$\"",
      " must match \"then\" schema"
    ]
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "sslMode": "disable",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "prefix": "test-prefix",
      "cloudProvider": "GCP",
      "bucketName": "test..bucket",
      "storageIntegration": "gcp_int",
      "endPoint": "",
      "useSSL": true,
      "credentials": "{}",
      "excludeWindow": {
        "excludeWindowStartTime": "",
        "excludeWindowEndTime": ""
      },
      "syncStartAt": "16:30"
    },
    "result": false,
    "err": [
      "bucketName must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^((?!goog)(?!.*google.*)(?!^(\\d+(\\.|$)){4}$)(?!.*\\.\\..*)[a-z0-9][a-z0-9-._]{1,61}[a-z0-9])$\"",
      " must match \"then\" schema"
    ]
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "sslMode": "disable",
      "syncFrequency": "30",
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "prefix": "test-prefix",
      "cloudProvider": "AZURE",
      "containerName": "test--container",
      "accountName": "test-account-name",
      "useSASTokens": true,
      "storageIntegration": "gcp_int",
      "sasToken": "sas-token",
      "accountKey": "test-azure-account-key",
      "useSSL": true
    },
    "result": false,
    "err": [
      "containerName must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(?=.{3,63}$)[a-z0-9]+(-[a-z0-9]+)*$\"",
      " must match \"then\" schema"
    ]
  },
  {
    "testTitle": "With valid multiple consent management providers config",
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "consentManagement": {
        "web": [
          {
            "provider": "custom",
            "consents": [
              {
                "consent": "Marketing"
              }
            ],
            "resolutionStrategy": "or"
          },
          {
            "provider": "oneTrust",
            "consents": [
              {
                "consent": "Marketing"
              }
            ]
          },
          {
            "provider": "ketch",
            "consents": []
          }
        ]
      }
    },
    "result": true
  },
  {
    "testTitle": "With consent management custom provider config and invalid resolutionStrategy value",
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "consentManagement": {
        "android": [
          {
            "provider": "custom",
            "resolutionStrategy": "nor"
          }
        ]
      }
    },
    "result": false,
    "err": [
      "consentManagement.android.0.resolutionStrategy must be equal to one of the allowed values",
      "consentManagement.android.0 must match \"then\" schema"
    ]
  },
  {
    "testTitle": "With consent management custom provider config and no resolutionStrategy value",
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "consentManagement": {
        "android": [
          {
            "provider": "custom"
          }
        ]
      }
    },
    "result": false,
    "err": [
      "consentManagement.android.0 must have required property 'resolutionStrategy'",
      "consentManagement.android.0 must match \"then\" schema"
    ]
  },
  {
    "testTitle": "With consent management OneTrust provider config and no resolutionStrategy value",
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "consentManagement": {
        "android": [
          {
            "provider": "oneTrust"
          }
        ]
      }
    },
    "result": true
  },
  {
    "testTitle": "With consent management custom provider config invalid provider value",
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "consentManagement": {
        "android": [
          {
            "provider": "dummyProvider"
          }
        ]
      }
    },
    "result": false,
    "err": ["consentManagement.android.0.provider must be equal to one of the allowed values"]
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "cloudProvider": "AWS",
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "prefix": "test-prefix",
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "accessKeyID": "test-access-key-id",
      "accessKey": "test-access-key",
      "oneTrustCookieCategories": {
        "android": [
          {
            "oneTrustCookieCategory": "C0001"
          },
          {
            "oneTrustCookieCategory": "C0002"
          }
        ],
        "ios": [
          {
            "oneTrustCookieCategory": "C0003"
          },
          {
            "oneTrustCookieCategory": "C0004"
          }
        ],
        "web": [
          {
            "oneTrustCookieCategory": ""
          }
        ],
        "unity": [],
        "amp": [
          {
            "oneTrustCookieCategory": "env.ENVIRONMENT_VARIABLE"
          }
        ],
        "cloud": [
          {
            "oneTrustCookieCategory": "{{ event.properties.prop1 || 'val' }}"
          }
        ],
        "reactnative": [
          {
            "oneTrustCookieCategory": "C0001"
          },
          {
            "oneTrustCookieCategory": "C0002"
          }
        ],
        "cloudSource": [
          {
            "oneTrustCookieCategory": "C0003"
          },
          {
            "oneTrustCookieCategory": "C0004"
          }
        ],
        "flutter": [
          {
            "oneTrustCookieCategory": ""
          }
        ],
        "cordova": [],
        "shopify": [
          {
            "oneTrustCookieCategory": "env.ENVIRONMENT_VARIABLE"
          }
        ]
      },
      "ketchConsentPurposes": {
        "android": [
          {
            "purpose": "P1"
          },
          {
            "purpose": "P2"
          }
        ],
        "ios": [
          {
            "purpose": "P3"
          },
          {
            "purpose": "P4"
          }
        ],
        "web": [
          {
            "purpose": ""
          }
        ],
        "unity": [],
        "amp": [
          {
            "purpose": "env.ENVIRONMENT_VARIABLE"
          }
        ],
        "cloud": [
          {
            "purpose": "{{ event.properties.prop1 || 'val' }}"
          }
        ],
        "reactnative": [
          {
            "purpose": "P1"
          },
          {
            "purpose": "P2"
          }
        ],
        "cloudSource": [
          {
            "purpose": "P3"
          },
          {
            "purpose": "P4"
          }
        ],
        "flutter": [
          {
            "purpose": ""
          }
        ],
        "cordova": [],
        "shopify": [
          {
            "purpose": "env.ENVIRONMENT_VARIABLE"
          }
        ]
      }
    },
    "result": true
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "cloudProvider": "AWS",
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "prefix": "test-prefix",
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "accessKeyID": "test-access-key-id",
      "accessKey": "test-access-key",
      "oneTrustCookieCategories": [
        {
          "oneTrustCookieCategory": "C0001"
        },
        {
          "oneTrustCookieCategory": "C0002"
        }
      ],
      "ketchConsentPurposes": [
        {
          "purpose": "P1"
        },
        {
          "purpose": "P2"
        }
      ]
    },
    "result": false,
    "err": ["oneTrustCookieCategories must be object", "ketchConsentPurposes must be object"]
  },
  {
    "config": {
      "account": "test-account",
      "database": "test-database",
      "warehouse": "test-warehouse",
      "user": "test-user",
      "password": "test-password",
      "cloudProvider": "AWS",
      "syncFrequency": "30",
      "enableSSE": false,
      "useRudderStorage": false,
      "roleBasedAuth": false,
      "prefix": "test-prefix",
      "useSTSTokens": false,
      "bucketName": "test-bucket",
      "accessKeyID": "test-access-key-id",
      "accessKey": "test-access-key",
      "oneTrustCookieCategories": {
        "android": [
          {
            "oneTrustCookieCategory": "more than 100 characters string - AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
          },
          {
            "oneTrustCookieCategory": "C0004"
          }
        ],
        "ios": [
          {
            "oneTrustCookieCategory": {
              "not": "a string"
            }
          },
          {
            "oneTrustCookieCategory": "C0004"
          }
        ],
        "web": {
          "not": "an array"
        },
        "unity": [
          "not an object",
          {
            "oneTrustCookieCategory": "C0004"
          }
        ]
      },
      "ketchConsentPurposes": {
        "android": [
          {
            "purpose": "more than 100 characters string - AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
          },
          {
            "purpose": "P4"
          }
        ],
        "ios": [
          {
            "purpose": {
              "not": "a string"
            }
          },
          {
            "purpose": "P4"
          }
        ],
        "web": {
          "not": "an array"
        },
        "unity": [
          "not an object",
          {
            "purpose": "P4"
          }
        ]
      }
    },
    "result": false,
    "err": [
      "oneTrustCookieCategories.android.0.oneTrustCookieCategory must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(.{0,100})$\"",
      "oneTrustCookieCategories.ios.0.oneTrustCookieCategory must be string",
      "oneTrustCookieCategories.web must be array",
      "oneTrustCookieCategories.unity.0 must be object",
      "ketchConsentPurposes.android.0.purpose must match pattern \"(^\\{\\{.*\\|\\|(.*)\\}\\}$)|(^env[.].+)|^(.{0,100})$\"",
      "ketchConsentPurposes.ios.0.purpose must be string",
      "ketchConsentPurposes.web must be array",
      "ketchConsentPurposes.unity.0 must be object"
    ]
  }
]
