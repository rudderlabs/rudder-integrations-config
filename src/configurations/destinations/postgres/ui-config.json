{
  "uiConfig": [
    {
      "title": "Connection Credentials",
      "fields": [
        {
          "type": "textInput",
          "label": "Host",
          "value": "host",
          "regex": "(?!.*\\.ngrok\\.io)^(.{0,100})$",
          "regexErrorMessage": "Invalid Host",
          "placeholder": "e.g: psql.mydomain.com",
          "required": true
        },
        {
          "type": "textInput",
          "label": "Database",
          "value": "database",
          "regex": "^(.{0,100})$",
          "regexErrorMessage": "Invalid Database",
          "placeholder": "e.g: rudderdb",
          "required": true
        },
        {
          "type": "textInput",
          "label": "User",
          "value": "user",
          "regex": "^(.{0,100})$",
          "regexErrorMessage": "Invalid User",
          "placeholder": "e.g: rudder",
          "required": true
        },
        {
          "type": "textInput",
          "label": "Password",
          "value": "password",
          "placeholder": "e.g: rudder-password",
          "regex": ".*",
          "required": true
        },
        {
          "type": "textInput",
          "label": "Port",
          "value": "port",
          "regex": "^(.{0,100})$",
          "regexErrorMessage": "Invalid Port",
          "placeholder": "5432",
          "required": true
        },
        {
          "type": "textInput",
          "label": "Namespace",
          "labelNote": "Schema name for the warehouse where the tables are created",
          "value": "namespace",
          "regex": "^((?!pg_|PG_|pG_|Pg_).{0,64})$",
          "regexErrorMessage": "Invalid Namespace",
          "required": false,
          "placeholder": "e.g: rudder-schema",
          "footerNote": "Default will be the source name"
        },
        {
          "type": "singleSelect",
          "label": "SSL Mode",
          "value": "sslMode",
          "options": [
            { "name": "disable", "value": "disable" },
            { "name": "require", "value": "require" },
            { "name": "verify ca", "value": "verify-ca" }
          ],
          "defaultOption": { "name": "disable", "value": "disable" },
          "required": true
        },
        {
          "type": "textInput",
          "required": true,
          "regex": "-----BEGIN RSA PRIVATE KEY-----.*-----END RSA PRIVATE KEY-----",
          "preRequisiteField": { "name": "sslMode", "selectedValue": "verify-ca" },
          "label": "Client Key Pem File",
          "value": "clientKey"
        },
        {
          "type": "textInput",
          "required": true,
          "regex": "-----BEGIN CERTIFICATE-----.*-----END CERTIFICATE-----",
          "preRequisiteField": { "name": "sslMode", "selectedValue": "verify-ca" },
          "label": "Client Cert Pem File",
          "value": "clientCert"
        },
        {
          "type": "textInput",
          "required": true,
          "regex": "-----BEGIN CERTIFICATE-----.*-----END CERTIFICATE-----",
          "preRequisiteField": { "name": "sslMode", "selectedValue": "verify-ca" },
          "label": "Server CA Pem File",
          "value": "serverCA"
        },
        {
          "type": "singleSelect",
          "label": "Sync Frequency",
          "value": "syncFrequency",
          "options": [
            { "name": "Every 30 minutes", "value": "30" },
            { "name": "Every 1 hour", "value": "60" },
            { "name": "Every 3 hours", "value": "180" },
            { "name": "Every 6 hours", "value": "360" },
            { "name": "Every 12 hours", "value": "720" },
            { "name": "Every 24 hours", "value": "1440" }
          ],
          "defaultOption": { "name": "Every 30 minutes", "value": "30" },
          "required": false
        },
        {
          "type": "timePicker",
          "label": "Sync Starting At (Optional)",
          "value": "syncStartAt",
          "options": { "omitSeconds": true, "minuteStep": 15 },
          "required": false,
          "footerNote": "Note: Please specify time in UTC"
        },
        {
          "type": "timeRangePicker",
          "label": "Exclude window (Optional)",
          "value": "excludeWindow",
          "startTime": { "label": "start time", "value": "excludeWindowStartTime" },
          "endTime": { "label": "end time", "value": "excludeWindowEndTime" },
          "options": { "omitSeconds": true, "minuteStep": 1 },
          "required": false,
          "footerNote": "Note: Please specify time in UTC"
        },
        {
          "type": "textInput",
          "label": "JSON columns (Optional)",
          "labelNote": "Specify required JSON properties in dot notation separated by commas",
          "value": "jsonPaths",
          "regex": "^(.*)$",
          "placeholder": "e.g: testMap.nestedMap, testArray",
          "required": false,
          "footerURL": {
            "link": "https://www.rudderstack.com/docs/destinations/warehouse-destinations/postgresql/#configuring-postgresql-destination-in-rudderstack",
            "text": "Instructions for setting up the JSON columns"
          }
        }
      ]
    },
    {
      "title": "Object Storage Configuration",
      "fields": [
        {
          "type": "checkbox",
          "label": "Use RudderStack managed object storage",
          "value": "useRudderStorage",
          "default": false,
          "footerNote": "Note: Only available for RudderStack managed data planes"
        },
        {
          "type": "singleSelect",
          "label": "Choose your Storage Provider",
          "value": "bucketProvider",
          "options": [
            { "name": "S3", "value": "S3" },
            { "name": "GCS", "value": "GCS" },
            { "name": "AZURE_BLOB", "value": "AZURE_BLOB" },
            { "name": "MINIO", "value": "MINIO" }
          ],
          "defaultOption": { "name": "MINIO", "value": "MINIO" },
          "required": true,
          "preRequisiteField": { "name": "useRudderStorage", "selectedValue": false }
        },
        {
          "type": "textInput",
          "preRequisiteField": [
            { "name": "bucketProvider", "selectedValue": "S3" },
            { "name": "useRudderStorage", "selectedValue": false }
          ],
          "label": "Staging S3 Storage Bucket Name",
          "labelNote": "S3 Bucket to store data before loading into Postgres",
          "value": "bucketName",
          "regex": "^((?!^xn--)(?!.*\\.\\..*)(?!^(\\d+(\\.|$)){4}$)[a-z0-9][a-z0-9-.]{1,61}[a-z0-9])$",
          "regexErrorMessage": "Invalid Staging S3 Storage Bucket Name",
          "placeholder": "e.g: s3-event-logs",
          "required": true,
          "footerNote": "Please make sure the bucket exists in your S3"
        },
        {
          "type": "textInput",
          "preRequisiteField": [
            { "name": "bucketProvider", "selectedValue": "GCS" },
            { "name": "useRudderStorage", "selectedValue": false }
          ],
          "label": "Staging GCS Object Storage Bucket Name",
          "labelNote": "GCS Bucket to store data before loading into Postgres",
          "value": "bucketName",
          "regex": "^((?!goog)(?!.*google.*)(?!^(\\d+(\\.|$)){4}$)(?!.*\\.\\..*)[a-z0-9][a-z0-9-._]{1,61}[a-z0-9])$",
          "regexErrorMessage": "Invalid Staging GCS Object Storage Bucket Name",
          "placeholder": "e.g: gcs-event-logs",
          "required": true,
          "footerNote": "Please make sure the bucket exists in your GCS"
        },
        {
          "type": "textInput",
          "preRequisiteField": [
            { "name": "bucketProvider", "selectedValue": "AZURE_BLOB" },
            { "name": "useRudderStorage", "selectedValue": false }
          ],
          "label": "Staging Azure Blob Storage Container Name",
          "labelNote": "Container to store data before loading into Postgres",
          "value": "containerName",
          "regex": "^(?=.{3,63}$)[a-z0-9]+(-[a-z0-9]+)*$",
          "regexErrorMessage": "Invalid Staging Azure Blob Storage Container Name",
          "required": true,
          "placeholder": "e.g: azure-event-logs",
          "footerNote": "Please make sure the container exists in your Azure Blob Storage"
        },
        {
          "type": "textInput",
          "preRequisiteField": [
            { "name": "bucketProvider", "selectedValue": "MINIO" },
            { "name": "useRudderStorage", "selectedValue": false }
          ],
          "label": "Staging MINIO Storage Bucket Name",
          "labelNote": "MINIO Bucket to store data before loading into Postgres",
          "value": "bucketName",
          "regex": "^((?!^(\\d+(\\.|$)){4}$)[a-z0-9][a-z0-9-.]{1,61}[a-z0-9])$",
          "regexErrorMessage": "Invalid Staging MINIO Storage Bucket Name",
          "required": true,
          "placeholder": "e.g: minio-event-logs",
          "footerNote": "Please make sure the bucket exists in your MINIO"
        },
        {
          "type": "checkbox",
          "preRequisiteField": [
            { "name": "bucketProvider", "selectedValue": "S3" },
            { "name": "useRudderStorage", "selectedValue": false }
          ],
          "label": "Role Based Authentication",
          "value": "roleBasedAuth",
          "default": true
        },
        {
          "type": "textInput",
          "preRequisiteField": [
            { "name": "bucketProvider", "selectedValue": "S3" },
            { "name": "useRudderStorage", "selectedValue": false },
            { "name": "roleBasedAuth", "selectedValue": true }
          ],
          "label": "IAM Role ARN",
          "value": "iamRoleARN",
          "regex": "^(.{0,100})$",
          "regexErrorMessage": "Invalid Role ARN",
          "required": true,
          "placeholder": "e.g: arn:aws:iam::123456789012:role/S3Access",
          "footerURL": {
            "link": "https://www.rudderstack.com/docs/destinations/aws-iam-role-for-rudderstack/",
            "text": "Instructions for creating IAM Role"
          }
        },
        {
          "type": "textInput",
          "preRequisiteField": [
            { "name": "bucketProvider", "selectedValue": "S3" },
            { "name": "useRudderStorage", "selectedValue": false },
            { "name": "roleBasedAuth", "selectedValue": false }
          ],
          "label": "AWS Access Key ID",
          "value": "accessKeyID",
          "regex": "^(.{0,100})$",
          "regexErrorMessage": "Invalid AWS Access Key ID",
          "required": true,
          "placeholder": "e.g: access-key-id"
        },
        {
          "type": "textInput",
          "preRequisiteField": [
            { "name": "bucketProvider", "selectedValue": "S3" },
            { "name": "useRudderStorage", "selectedValue": false },
            { "name": "roleBasedAuth", "selectedValue": false }
          ],
          "label": "AWS Secret Access Key",
          "value": "accessKey",
          "regex": "^(.{0,100})$",
          "regexErrorMessage": "Invalid AWS Secret Access Key",
          "required": true,
          "placeholder": "e.g: secret-access-key"
        },
        {
          "type": "textInput",
          "preRequisiteField": [
            { "name": "bucketProvider", "selectedValue": "AZURE_BLOB" },
            { "name": "useRudderStorage", "selectedValue": false }
          ],
          "label": "Azure Blob Storage Account Name",
          "value": "accountName",
          "regex": "^(.{0,100})$",
          "regexErrorMessage": "Invalid Azure Blob Storage Account Name",
          "required": true,
          "placeholder": "e.g: account-name"
        },
        {
          "type": "textInput",
          "preRequisiteField": [
            { "name": "bucketProvider", "selectedValue": "AZURE_BLOB" },
            { "name": "useRudderStorage", "selectedValue": false },
            { "name": "useSASTokens", "selectedValue": false }
          ],
          "label": "Azure Blob Storage Account Key",
          "value": "accountKey",
          "regex": "^(.{0,100})$",
          "regexErrorMessage": "Invalid Azure Blob Storage Account Key",
          "required": true,
          "secret": true,
          "placeholder": "e.g: account-key"
        },
        {
          "type": "textInput",
          "preRequisiteField": [
            { "name": "bucketProvider", "selectedValue": "AZURE_BLOB" },
            { "name": "useRudderStorage", "selectedValue": false },
            { "name": "useSASTokens", "selectedValue": true }
          ],
          "label": "Azure Blob Storage SAS Token",
          "value": "sasToken",
          "regex": "^(.+)$",
          "regexErrorMessage": "Invalid Azure Blob Storage SAS Token",
          "required": true,
          "placeholder": "e.g: sas-token",
          "secret": true
        },
        {
          "type": "checkbox",
          "preRequisiteField": [
            { "name": "bucketProvider", "selectedValue": "AZURE_BLOB" },
            { "name": "useRudderStorage", "selectedValue": false }
          ],
          "label": "Use shared access signature (SAS) Tokens",
          "value": "useSASTokens",
          "default": false,
          "footerNote": "Use this to Grant limited access to Azure Storage resources using shared access signatures (SAS)"
        },
        {
          "type": "textareaInput",
          "preRequisiteField": [
            { "name": "bucketProvider", "selectedValue": "GCS" },
            { "name": "useRudderStorage", "selectedValue": false }
          ],
          "label": "Credentials",
          "labelNote": "GCP Service Account credentials JSON for RudderStack to use in loading data into your Google Cloud Storage",
          "value": "credentials",
          "regex": ".*",
          "required": true,
          "footerNote": "Create a service account in your GCP Project for RudderStack with roles of 'storage.objectCreator'"
        },
        {
          "type": "textInput",
          "preRequisiteField": [
            { "name": "bucketProvider", "selectedValue": "MINIO" },
            { "name": "useRudderStorage", "selectedValue": false }
          ],
          "label": "MinIO Endpoint",
          "value": "endPoint",
          "regex": "(?!.*\\.ngrok\\.io)^(.{0,100})$",
          "regexErrorMessage": "Invalid MinIO Endpoint",
          "required": true,
          "placeholder": "e.g: play.min.io:9000"
        },
        {
          "type": "textInput",
          "preRequisiteField": [
            { "name": "bucketProvider", "selectedValue": "MINIO" },
            { "name": "useRudderStorage", "selectedValue": false }
          ],
          "label": "MINIO Access Key ID",
          "value": "accessKeyID",
          "regex": "^(.{0,100})$",
          "regexErrorMessage": "Invalid MinIO Access Key ID",
          "required": true,
          "placeholder": "e.g: access-key-id"
        },
        {
          "type": "textInput",
          "preRequisiteField": [
            { "name": "bucketProvider", "selectedValue": "MINIO" },
            { "name": "useRudderStorage", "selectedValue": false }
          ],
          "label": "MINIO Secret Access Key",
          "value": "secretAccessKey",
          "regex": "^(.{0,100})$",
          "regexErrorMessage": "Invalid MinIO Secret Access Key",
          "required": true,
          "placeholder": "e.g: secret-access-key"
        },
        {
          "type": "checkbox",
          "preRequisiteField": [
            { "name": "bucketProvider", "selectedValue": "MINIO" },
            { "name": "useRudderStorage", "selectedValue": false }
          ],
          "label": "Use SSL for connection",
          "value": "useSSL",
          "default": true
        }
      ]
    },
    {
      "title": "Consent Settings",
      "fields": [
        {
          "type": "dynamicCustomForm",
          "value": "oneTrustCookieCategories",
          "label": "OneTrust Cookie Categories",
          "customFields": [
            {
              "type": "textInput",
              "placeholder": "Marketing",
              "value": "oneTrustCookieCategory",
              "label": "Category Name/ID",
              "required": false
            }
          ]
        }
      ]
    }
  ]
}
