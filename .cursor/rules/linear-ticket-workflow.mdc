# Linear Ticket Workflow

## Overview
This rule provides a structured approach to handle Linear tickets with human oversight at key decision points. The workflow ensures thorough planning, validation, and implementation phases.

## Workflow Steps

### 1. Ticket Analysis Phase
When a Linear ticket link or number is provided:

1. **Extract Ticket Information**
   - Use Linear API to fetch ticket details
   - Parse title, description, requirements, and acceptance criteria
   - Identify ticket type (bug, feature, task, etc.)
   - Note priority, assignee, and due date

2. **Context Gathering**
   - Analyze the current codebase structure
   - Identify relevant files and directories
   - Understand project architecture and patterns
   - Review similar implementations if applicable

### 2. Planning Phase
Create a comprehensive implementation plan:

1. **Requirements Breakdown**
   - List all explicit requirements from the ticket
   - Identify implicit requirements based on context
   - Break down complex requirements into smaller tasks

2. **Technical Analysis**
   - Determine affected components/modules
   - Identify dependencies and potential conflicts
   - Plan data model changes if needed
   - Consider testing requirements

3. **Implementation Strategy**
   - Choose appropriate patterns and conventions
   - Plan file structure and organization
   - Consider performance and scalability implications
   - Plan error handling and edge cases

4. **Risk Assessment**
   - Identify potential challenges or blockers
   - Plan mitigation strategies
   - Consider impact on existing functionality

### 3. Validation Phase (Human Review Required)
Present the plan to the human for validation:

1. **Plan Summary**
   - Provide a clear, concise summary of the approach
   - Highlight key decisions and rationale
   - Show affected files and components

2. **Alternative Options (If necessary)**
   - Present 2-3 different implementation approaches if applicable
   - Explain trade-offs for each option
   - Recommend the preferred approach with reasoning

3. **Questions for Clarification(If necessary)**
   - Ask specific questions about unclear requirements
   - Request feedback on proposed approach
   - Seek input on priority of different aspects

4. **Wait for Human Approval (MUST)**
   - Do not proceed with implementation until plan is approved
   - Incorporate feedback and revise plan if needed
   - Confirm final approach before proceeding

### 4. Implementation Phase
After human validation:

1. **Incremental Development**
   - Implement changes in logical, testable increments
   - Commit changes with descriptive messages
   - Test each increment before proceeding

2. **Code Quality**
   - Follow project coding standards and conventions
   - Add appropriate comments and documentation
   - Ensure proper error handling
   - Write unit tests where applicable

3. **Integration Testing**
   - Test the implementation in context
   - Verify it works with existing functionality
   - Check for any regressions

### 5. Final Validation Phase
Before marking ticket complete:

1. **Self-Review**
   - Verify all requirements are met
   - Check code quality and standards
   - Ensure proper error handling
   - Validate against acceptance criteria

2. **Human Review**
   - Present final implementation for review
   - Highlight key changes and decisions
   - Request final approval before marking complete

3. **Documentation**
   - Update relevant documentation
   - Add comments explaining complex logic
   - Update README or other project docs if needed

## Communication Guidelines

### When Presenting Plans
- Use clear, concise language
- Provide context for technical decisions
- Highlight risks and trade-offs
- Ask specific questions for clarification

### When Seeking Validation
- Present options with clear reasoning
- Explain the impact of different choices
- Be specific about what feedback is needed
- Show examples or mockups when helpful

### When Reporting Progress
- Provide regular updates on implementation progress
- Highlight any challenges encountered
- Show intermediate results when appropriate
- Ask for guidance when stuck

## Error Handling

### If Ticket Information is Unclear
- Ask specific questions to clarify requirements
- Propose multiple interpretations and ask for guidance
- Request additional context or examples

### If Implementation Hits Roadblocks
- Document the specific issue encountered
- Propose alternative approaches
- Ask for human guidance on how to proceed
- Consider breaking the task into smaller parts

### If Requirements Change During Implementation
- Stop current work immediately
- Re-evaluate the plan with new requirements
- Present updated plan for human validation
- Adjust implementation approach as needed

## Success Criteria

A ticket is ready for completion when:
- All explicit requirements are implemented
- Code follows project standards and conventions
- Appropriate tests are in place
- Documentation is updated
- Human has reviewed and approved the implementation
- No regressions are introduced

## Template for Plan Presentation

```
## Linear Ticket: [TICKET-NUMBER] - [TITLE]

### Requirements Summary
- [List key requirements]

### Proposed Implementation
- [Describe the approach]
- [List affected files/components]
- [Highlight key decisions]

### Alternative Approaches
- [Option 1]: [Pros/Cons]
- [Option 2]: [Pros/Cons]

### Questions for Clarification
- [Specific questions about requirements]
- [Areas needing human input]

### Next Steps
- [What happens after approval]
- [Estimated timeline]

Please review and provide feedback on this plan.
```

This workflow ensures thorough planning, human oversight at critical decision points, and high-quality implementation while maintaining flexibility for different project types and requirements.
description:
globs:
alwaysApply: false
---
